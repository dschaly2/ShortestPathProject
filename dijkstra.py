import numpy as np

def dijkstra(adj_matrix, start, end):
    num_nodes = len(adj_matrix)
    distances = [float('inf')] * num_nodes
    predecessors = [None] * num_nodes
    distances[start] = 0

    unvisited = list(range(num_nodes))

    while unvisited:
        current_node = min(unvisited, key=lambda node: distances[node])
        unvisited.remove(current_node)

        if current_node == end:
            return distances[end], reconstruct_path(predecessors, start, end)  # Return distance and path

        for neighbor in range(num_nodes):
            if adj_matrix[current_node][neighbor] > 0:
                distance = distances[current_node] + adj_matrix[current_node][neighbor]

                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    predecessors[neighbor] = current_node

    return float('inf'), []  # Return infinity and an empty path if no path to the end node is found

def reconstruct_path(predecessors, start, end):
    path = []
    while end is not None:
        path.insert(0, end)
        end = predecessors[end]
    return path

# Input Adjacency Matrix
largest_adjacency_matrix = np.array([
    [0.0, 2.0, 3.0, 13.0, 14.0, 11.0, 4.0, 7.0, 15.0, 6.0, 1.0, 10.0, 3.0, 13.0, 6.0, 12.0, 10.0, 4.0, 2.0, 13.0, 15.0, 3.0, 8.0, 12.0, 13.0],
    [2.0, 0.0, 14.0, 3.0, 10.0, 9.0, 13.0, 1.0, 3.0, 2.0, 6.0, 10.0, 14.0, 9.0, 11.0, 1.0, 4.0, 6.0, 9.0, 4.0, 8.0, 10.0, 4.0, 12.0, 12.0],
    [3.0, 14.0, 0.0, 8.0, 14.0, 9.0, 4.0, 2.0, 15.0, 2.0, 2.0, 15.0, 5.0, 8.0, 13.0, 15.0, 9.0, 14.0, 7.0, 1.0, 5.0, 15.0, 13.0, 6.0, 15.0],
    [13.0, 3.0, 8.0, 0.0, 7.0, 7.0, 15.0, 11.0, 13.0, 11.0, 10.0, 5.0, 1.0, 9.0, 12.0, 15.0, 1.0, 5.0, 4.0, 13.0, 7.0, 10.0, 2.0, 3.0, 5.0],
    [14.0, 10.0, 14.0, 7.0, 0.0, 5.0, 8.0, 14.0, 9.0, 7.0, 4.0, 5.0, 6.0, 10.0, 1.0, 14.0, 6.0, 13.0, 10.0, 13.0, 12.0, 9.0, 3.0, 1.0, 1.0],
    [11.0, 9.0, 9.0, 7.0, 5.0, 0.0, 10.0, 9.0, 15.0, 13.0, 8.0, 1.0, 3.0, 12.0, 12.0, 6.0, 11.0, 2.0, 3.0, 10.0, 2.0, 8.0, 8.0, 9.0, 14.0],
    [4.0, 13.0, 4.0, 15.0, 8.0, 10.0, 0.0, 2.0, 11.0, 6.0, 9.0, 14.0, 10.0, 9.0, 15.0, 8.0, 6.0, 3.0, 14.0, 2.0, 14.0, 1.0, 2.0, 14.0, 1.0],
    [7.0, 1.0, 2.0, 11.0, 14.0, 9.0, 2.0, 0.0, 14.0, 15.0, 5.0, 7.0, 4.0, 11.0, 14.0, 4.0, 9.0, 4.0, 4.0, 8.0, 3.0, 9.0, 1.0, 8.0, 12.0],
    [15.0, 3.0, 15.0, 13.0, 9.0, 15.0, 11.0, 14.0, 0.0, 13.0, 1.0, 12.0, 7.0, 3.0, 14.0, 12.0, 1.0, 5.0, 10.0, 15.0, 3.0, 8.0, 8.0, 10.0, 12.0],
    [6.0, 2.0, 2.0, 11.0, 7.0, 13.0, 6.0, 15.0, 13.0, 0.0, 9.0, 4.0, 6.0, 4.0, 1.0, 8.0, 8.0, 12.0, 8.0, 15.0, 12.0, 6.0, 14.0, 11.0, 2.0],
    [1.0, 6.0, 2.0, 10.0, 4.0, 8.0, 9.0, 5.0, 1.0, 9.0, 0.0, 10.0, 11.0, 3.0, 1.0, 8.0, 6.0, 13.0, 13.0, 8.0, 6.0, 11.0, 7.0, 4.0, 4.0],
    [10.0, 10.0, 15.0, 5.0, 5.0, 1.0, 14.0, 7.0, 12.0, 4.0, 10.0, 0.0, 1.0, 9.0, 11.0, 11.0, 15.0, 4.0, 14.0, 4.0, 3.0, 9.0, 14.0, 14.0, 13.0],
    [3.0, 14.0, 5.0, 1.0, 6.0, 3.0, 10.0, 4.0, 7.0, 6.0, 11.0, 1.0, 0.0, 1.0, 2.0, 7.0, 12.0, 12.0, 12.0, 14.0, 12.0, 12.0, 2.0, 7.0, 3.0],
    [13.0, 9.0, 8.0, 9.0, 10.0, 12.0, 9.0, 11.0, 3.0, 4.0, 3.0, 9.0, 1.0, 0.0, 10.0, 3.0, 12.0, 5.0, 3.0, 3.0, 1.0, 1.0, 13.0, 14.0, 9.0],
    [6.0, 11.0, 13.0, 12.0, 1.0, 12.0, 15.0, 14.0, 14.0, 1.0, 1.0, 11.0, 2.0, 10.0, 0.0, 14.0, 9.0, 2.0, 12.0, 7.0, 13.0, 5.0, 15.0, 5.0, 11.0],
    [12.0, 1.0, 15.0, 15.0, 14.0, 6.0, 8.0, 4.0, 12.0, 8.0, 8.0, 11.0, 7.0, 3.0, 14.0, 0.0, 15.0, 12.0, 2.0, 10.0, 13.0, 15.0, 7.0, 5.0, 9.0],
    [10.0, 4.0, 9.0, 1.0, 6.0, 11.0, 6.0, 9.0, 1.0, 8.0, 6.0, 15.0, 12.0, 12.0, 9.0, 15.0, 0.0, 2.0, 14.0, 3.0, 2.0, 3.0, 12.0, 15.0, 4.0],
    [4.0, 6.0, 14.0, 5.0, 13.0, 2.0, 3.0, 4.0, 5.0, 12.0, 13.0, 4.0, 12.0, 5.0, 2.0, 12.0, 2.0, 0.0, 5.0, 10.0, 6.0, 15.0, 9.0, 5.0, 2.0],
    [2.0, 9.0, 7.0, 4.0, 10.0, 3.0, 14.0, 4.0, 10.0, 8.0, 13.0, 14.0, 12.0, 3.0, 12.0, 2.0, 14.0, 5.0, 0.0, 10.0, 1.0, 1.0, 10.0, 10.0, 2.0],
    [13.0, 4.0, 1.0, 13.0, 13.0, 10.0, 2.0, 8.0, 15.0, 15.0, 8.0, 4.0, 14.0, 3.0, 7.0, 10.0, 3.0, 10.0, 10.0, 0.0, 12.0, 1.0, 10.0, 1.0, 7.0],
    [15.0, 8.0, 5.0, 7.0, 12.0, 2.0, 14.0, 3.0, 3.0, 12.0, 6.0, 3.0, 12.0, 1.0, 13.0, 13.0, 2.0, 6.0, 1.0, 12.0, 0.0, 2.0, 15.0, 14.0, 5.0],
    [3.0, 10.0, 15.0, 10.0, 9.0, 8.0, 1.0, 9.0, 8.0, 6.0, 11.0, 9.0, 12.0, 1.0, 5.0, 15.0, 3.0, 15.0, 1.0, 1.0, 2.0, 0.0, 10.0, 8.0, 1.0],
    [8.0, 4.0, 13.0, 2.0, 3.0, 8.0, 2.0, 1.0, 8.0, 14.0, 7.0, 14.0, 2.0, 13.0, 15.0, 7.0, 12.0, 9.0, 10.0, 10.0, 15.0, 10.0, 0.0, 10.0, 6.0],
    [12.0, 12.0, 6.0, 3.0, 1.0, 9.0, 14.0, 8.0, 10.0, 11.0, 4.0, 14.0, 7.0, 14.0, 5.0, 5.0, 15.0, 5.0, 10.0, 1.0, 14.0, 8.0, 10.0, 0.0, 8.0],
    [13.0, 12.0, 15.0, 5.0, 1.0, 14.0, 1.0, 12.0, 12.0, 2.0, 4.0, 13.0, 3.0, 9.0, 11.0, 9.0, 4.0, 2.0, 2.0, 7.0, 5.0, 1.0, 6.0, 8.0, 0.0]
])

smallest_adjacency_matrix = np.array([
    [0.0, 14.0, 3.0, 3.0, 12.0], [14.0, 0.0, 12.0, 2.0, 9.0], 
    [3.0, 12.0, 0.0, 11.0, 14.0], [3.0, 2.0, 11.0, 0.0, 4.0], 
    [12.0, 9.0, 14.0, 4.0, 0.0]
])

blocked_adjacency_matrix = np.array([
    [0.0, 5.0, 5.0, 13.0, 6.0, 100.0, 6.0, 14.0, 8.0, 2.0, 5.0, 5.0, 2.0, 100.0, 3.0], [5.0, 0.0, 7.0, 15.0, 3.0, 8.0, 3.0, 14.0, 3.0, 100.0, 6.0, 5.0, 8.0, 6.0, 1.0], 
    [5.0, 7.0, 0.0, 4.0, 12.0, 15.0, 5.0, 15.0, 9.0, 15.0, 2.0, 4.0, 100.0, 3.0, 12.0], [13.0, 15.0, 4.0, 0.0, 5.0, 1.0, 11.0, 4.0, 3.0, 100.0, 3.0, 5.0, 11.0, 8.0, 13.0], 
    [6.0, 3.0, 12.0, 100.0, 0.0, 10.0, 13.0, 8.0, 9.0, 7.0, 1.0, 13.0, 5.0, 12.0, 7.0], [15.0, 8.0, 15.0, 1.0, 10.0, 0.0, 11.0, 1.0, 5.0, 100.0, 6.0, 1.0, 2.0, 6.0, 15.0], 
    [6.0, 3.0, 5.0, 11.0, 100.0, 11.0, 0.0, 7.0, 13.0, 7.0, 2.0, 1.0, 13.0, 14.0, 3.0], [14.0, 14.0, 15.0, 4.0, 8.0, 1.0, 7.0, 0.0, 14.0, 100.0, 1.0, 15.0, 5.0, 14.0, 13.0], 
    [8.0, 3.0, 9.0, 3.0, 9.0, 5.0, 13.0, 14.0, 0.0, 13.0, 10.0, 11.0, 3.0, 13.0, 12.0], [2.0, 8.0, 15.0, 6.0, 7.0, 2.0, 7.0, 6.0, 13.0, 100.0, 5.0, 1.0, 7.0, 3.0, 6.0], 
    [5.0, 6.0, 2.0, 3.0, 1.0, 6.0, 100.0, 1.0, 10.0, 5.0, 0.0, 100.0, 5.0, 14.0, 5.0], [5.0, 5.0, 4.0, 5.0, 13.0, 1.0, 1.0, 15.0, 11.0, 1.0, 13.0, 0.0, 6.0, 100.0, 13.0], 
    [2.0, 8.0, 5.0, 11.0, 5.0, 2.0, 13.0, 5.0, 100.0, 7.0, 5.0, 6.0, 0.0, 7.0, 7.0], [14.0, 6.0, 3.0, 8.0, 12.0, 6.0, 14.0, 14.0, 13.0, 3.0, 14.0, 12.0, 7.0, 0.0, 5.0], 
    [3.0, 1.0, 12.0, 13.0, 7.0, 15.0, 100.0, 13.0, 12.0, 6.0, 5.0, 13.0, 7.0, 5.0, 0.0]
])

start_node = 0
end_node = 3

shortest_distance, shortest_path = dijkstra(largest_adjacency_matrix, start_node, end_node)

if shortest_distance < float('inf'):
    print(f"Shortest distance from {start_node} to {end_node}: {shortest_distance}")
    print(f"Shortest path: {shortest_path}")
else:
    print(f"No path from {start_node} to {end_node}")

start_node = 0
end_node = 3

shortest_distance, shortest_path = dijkstra(smallest_adjacency_matrix, start_node, end_node)

if shortest_distance < float('inf'):
    print(f"Shortest distance from {start_node} to {end_node}: {shortest_distance}")
    print(f"Shortest path: {shortest_path}")
else:
    print(f"No path from {start_node} to {end_node}")

start_node = 0
end_node = 4

shortest_distance, shortest_path = dijkstra(blocked_adjacency_matrix, start_node, end_node)

if shortest_distance < float('inf'):
    print(f"Shortest distance from {start_node} to {end_node}: {shortest_distance}")
    print(f"Shortest path: {shortest_path}")
else:
    print(f"No path from {start_node} to {end_node}")

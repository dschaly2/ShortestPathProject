import numpy as np

def floyd_warshall_with_path(adj_matrix):
    num_nodes = len(adj_matrix)
    distances = np.copy(adj_matrix)
    predecessors = np.full((num_nodes, num_nodes), -1, dtype=int)

    for k in range(num_nodes):
        for i in range(num_nodes):
            for j in range(num_nodes):
                if distances[i][j] > distances[i][k] + distances[k][j]:
                    distances[i][j] = distances[i][k] + distances[k][j]
                    predecessors[i][j] = k  # Store the intermediate node k

    return distances, predecessors

def reconstruct_path(predecessors, start, end):
    if predecessors[start][end] == -1:
        return [start, end]
    intermediate = predecessors[start][end]
    path1 = reconstruct_path(predecessors, start, intermediate)
    path2 = reconstruct_path(predecessors, intermediate, end)
    return path1[:-1] + path2


largest_adjacency_matrix = np.array([
    [0.0, 2.0, 3.0, 13.0, 14.0, 11.0, 4.0, 7.0, 15.0, 6.0, 1.0, 10.0, 3.0, 13.0, 6.0, 12.0, 10.0, 4.0, 2.0, 13.0, 15.0, 3.0, 8.0, 12.0, 13.0],
    [2.0, 0.0, 14.0, 3.0, 10.0, 9.0, 13.0, 1.0, 3.0, 2.0, 6.0, 10.0, 14.0, 9.0, 11.0, 1.0, 4.0, 6.0, 9.0, 4.0, 8.0, 10.0, 4.0, 12.0, 12.0],
    [3.0, 14.0, 0.0, 8.0, 14.0, 9.0, 4.0, 2.0, 15.0, 2.0, 2.0, 15.0, 5.0, 8.0, 13.0, 15.0, 9.0, 14.0, 7.0, 1.0, 5.0, 15.0, 13.0, 6.0, 15.0],
    [13.0, 3.0, 8.0, 0.0, 7.0, 7.0, 15.0, 11.0, 13.0, 11.0, 10.0, 5.0, 1.0, 9.0, 12.0, 15.0, 1.0, 5.0, 4.0, 13.0, 7.0, 10.0, 2.0, 3.0, 5.0],
    [14.0, 10.0, 14.0, 7.0, 0.0, 5.0, 8.0, 14.0, 9.0, 7.0, 4.0, 5.0, 6.0, 10.0, 1.0, 14.0, 6.0, 13.0, 10.0, 13.0, 12.0, 9.0, 3.0, 1.0, 1.0],
    [11.0, 9.0, 9.0, 7.0, 5.0, 0.0, 10.0, 9.0, 15.0, 13.0, 8.0, 1.0, 3.0, 12.0, 12.0, 6.0, 11.0, 2.0, 3.0, 10.0, 2.0, 8.0, 8.0, 9.0, 14.0],
    [4.0, 13.0, 4.0, 15.0, 8.0, 10.0, 0.0, 2.0, 11.0, 6.0, 9.0, 14.0, 10.0, 9.0, 15.0, 8.0, 6.0, 3.0, 14.0, 2.0, 14.0, 1.0, 2.0, 14.0, 1.0],
    [7.0, 1.0, 2.0, 11.0, 14.0, 9.0, 2.0, 0.0, 14.0, 15.0, 5.0, 7.0, 4.0, 11.0, 14.0, 4.0, 9.0, 4.0, 4.0, 8.0, 3.0, 9.0, 1.0, 8.0, 12.0],
    [15.0, 3.0, 15.0, 13.0, 9.0, 15.0, 11.0, 14.0, 0.0, 13.0, 1.0, 12.0, 7.0, 3.0, 14.0, 12.0, 1.0, 5.0, 10.0, 15.0, 3.0, 8.0, 8.0, 10.0, 12.0],
    [6.0, 2.0, 2.0, 11.0, 7.0, 13.0, 6.0, 15.0, 13.0, 0.0, 9.0, 4.0, 6.0, 4.0, 1.0, 8.0, 8.0, 12.0, 8.0, 15.0, 12.0, 6.0, 14.0, 11.0, 2.0],
    [1.0, 6.0, 2.0, 10.0, 4.0, 8.0, 9.0, 5.0, 1.0, 9.0, 0.0, 10.0, 11.0, 3.0, 1.0, 8.0, 6.0, 13.0, 13.0, 8.0, 6.0, 11.0, 7.0, 4.0, 4.0],
    [10.0, 10.0, 15.0, 5.0, 5.0, 1.0, 14.0, 7.0, 12.0, 4.0, 10.0, 0.0, 1.0, 9.0, 11.0, 11.0, 15.0, 4.0, 14.0, 4.0, 3.0, 9.0, 14.0, 14.0, 13.0],
    [3.0, 14.0, 5.0, 1.0, 6.0, 3.0, 10.0, 4.0, 7.0, 6.0, 11.0, 1.0, 0.0, 1.0, 2.0, 7.0, 12.0, 12.0, 12.0, 14.0, 12.0, 12.0, 2.0, 7.0, 3.0],
    [13.0, 9.0, 8.0, 9.0, 10.0, 12.0, 9.0, 11.0, 3.0, 4.0, 3.0, 9.0, 1.0, 0.0, 10.0, 3.0, 12.0, 5.0, 3.0, 3.0, 1.0, 1.0, 13.0, 14.0, 9.0],
    [6.0, 11.0, 13.0, 12.0, 1.0, 12.0, 15.0, 14.0, 14.0, 1.0, 1.0, 11.0, 2.0, 10.0, 0.0, 14.0, 9.0, 2.0, 12.0, 7.0, 13.0, 5.0, 15.0, 5.0, 11.0],
    [12.0, 1.0, 15.0, 15.0, 14.0, 6.0, 8.0, 4.0, 12.0, 8.0, 8.0, 11.0, 7.0, 3.0, 14.0, 0.0, 15.0, 12.0, 2.0, 10.0, 13.0, 15.0, 7.0, 5.0, 9.0],
    [10.0, 4.0, 9.0, 1.0, 6.0, 11.0, 6.0, 9.0, 1.0, 8.0, 6.0, 15.0, 12.0, 12.0, 9.0, 15.0, 0.0, 2.0, 14.0, 3.0, 2.0, 3.0, 12.0, 15.0, 4.0],
    [4.0, 6.0, 14.0, 5.0, 13.0, 2.0, 3.0, 4.0, 5.0, 12.0, 13.0, 4.0, 12.0, 5.0, 2.0, 12.0, 2.0, 0.0, 5.0, 10.0, 6.0, 15.0, 9.0, 5.0, 2.0],
    [2.0, 9.0, 7.0, 4.0, 10.0, 3.0, 14.0, 4.0, 10.0, 8.0, 13.0, 14.0, 12.0, 3.0, 12.0, 2.0, 14.0, 5.0, 0.0, 10.0, 1.0, 1.0, 10.0, 10.0, 2.0],
    [13.0, 4.0, 1.0, 13.0, 13.0, 10.0, 2.0, 8.0, 15.0, 15.0, 8.0, 4.0, 14.0, 3.0, 7.0, 10.0, 3.0, 10.0, 10.0, 0.0, 12.0, 1.0, 10.0, 1.0, 7.0],
    [15.0, 8.0, 5.0, 7.0, 12.0, 2.0, 14.0, 3.0, 3.0, 12.0, 6.0, 3.0, 12.0, 1.0, 13.0, 13.0, 2.0, 6.0, 1.0, 12.0, 0.0, 2.0, 15.0, 14.0, 5.0],
    [3.0, 10.0, 15.0, 10.0, 9.0, 8.0, 1.0, 9.0, 8.0, 6.0, 11.0, 9.0, 12.0, 1.0, 5.0, 15.0, 3.0, 15.0, 1.0, 1.0, 2.0, 0.0, 10.0, 8.0, 1.0],
    [8.0, 4.0, 13.0, 2.0, 3.0, 8.0, 2.0, 1.0, 8.0, 14.0, 7.0, 14.0, 2.0, 13.0, 15.0, 7.0, 12.0, 9.0, 10.0, 10.0, 15.0, 10.0, 0.0, 10.0, 6.0],
    [12.0, 12.0, 6.0, 3.0, 1.0, 9.0, 14.0, 8.0, 10.0, 11.0, 4.0, 14.0, 7.0, 14.0, 5.0, 5.0, 15.0, 5.0, 10.0, 1.0, 14.0, 8.0, 10.0, 0.0, 8.0],
    [13.0, 12.0, 15.0, 5.0, 1.0, 14.0, 1.0, 12.0, 12.0, 2.0, 4.0, 13.0, 3.0, 9.0, 11.0, 9.0, 4.0, 2.0, 2.0, 7.0, 5.0, 1.0, 6.0, 8.0, 0.0]
])

smallest_adjacency_matrix = np.array([
    [0.0, 14.0, 3.0, 3.0, 12.0], [14.0, 0.0, 12.0, 2.0, 9.0], 
    [3.0, 12.0, 0.0, 11.0, 14.0], [3.0, 2.0, 11.0, 0.0, 4.0], 
    [12.0, 9.0, 14.0, 4.0, 0.0]
])

blocked_adjacency_matrix = np.array([
    [0.0, 5.0, 5.0, 13.0, 6.0, 100.0, 6.0, 14.0, 8.0, 2.0, 5.0, 5.0, 2.0, 100.0, 3.0], [5.0, 0.0, 7.0, 15.0, 3.0, 8.0, 3.0, 14.0, 3.0, 100.0, 6.0, 5.0, 8.0, 6.0, 1.0], 
    [5.0, 7.0, 0.0, 4.0, 12.0, 15.0, 5.0, 15.0, 9.0, 15.0, 2.0, 4.0, 100.0, 3.0, 12.0], [13.0, 15.0, 4.0, 0.0, 5.0, 1.0, 11.0, 4.0, 3.0, 100.0, 3.0, 5.0, 11.0, 8.0, 13.0], 
    [6.0, 3.0, 12.0, 100.0, 0.0, 10.0, 13.0, 8.0, 9.0, 7.0, 1.0, 13.0, 5.0, 12.0, 7.0], [15.0, 8.0, 15.0, 1.0, 10.0, 0.0, 11.0, 1.0, 5.0, 100.0, 6.0, 1.0, 2.0, 6.0, 15.0], 
    [6.0, 3.0, 5.0, 11.0, 100.0, 11.0, 0.0, 7.0, 13.0, 7.0, 2.0, 1.0, 13.0, 14.0, 3.0], [14.0, 14.0, 15.0, 4.0, 8.0, 1.0, 7.0, 0.0, 14.0, 100.0, 1.0, 15.0, 5.0, 14.0, 13.0], 
    [8.0, 3.0, 9.0, 3.0, 9.0, 5.0, 13.0, 14.0, 0.0, 13.0, 10.0, 11.0, 3.0, 13.0, 12.0], [2.0, 8.0, 15.0, 6.0, 7.0, 2.0, 7.0, 6.0, 13.0, 100.0, 5.0, 1.0, 7.0, 3.0, 6.0], 
    [5.0, 6.0, 2.0, 3.0, 1.0, 6.0, 100.0, 1.0, 10.0, 5.0, 0.0, 100.0, 5.0, 14.0, 5.0], [5.0, 5.0, 4.0, 5.0, 13.0, 1.0, 1.0, 15.0, 11.0, 1.0, 13.0, 0.0, 6.0, 100.0, 13.0], 
    [2.0, 8.0, 5.0, 11.0, 5.0, 2.0, 13.0, 5.0, 100.0, 7.0, 5.0, 6.0, 0.0, 7.0, 7.0], [14.0, 6.0, 3.0, 8.0, 12.0, 6.0, 14.0, 14.0, 13.0, 3.0, 14.0, 12.0, 7.0, 0.0, 5.0], 
    [3.0, 1.0, 12.0, 13.0, 7.0, 15.0, 100.0, 13.0, 12.0, 6.0, 5.0, 13.0, 7.0, 5.0, 0.0]
])

start_node = 0
end_node = 4

all_shortest_distances, predecessors = floyd_warshall_with_path(largest_adjacency_matrix)
shortest_distance = all_shortest_distances[start_node][end_node]

if shortest_distance < float('inf'):
    print(f"Shortest distance from {start_node} to {end_node}: {shortest_distance}")
    shortest_path = reconstruct_path(predecessors, start_node, end_node)
    print(f"Shortest path: {shortest_path}")
else:
    print(f"No path from {start_node} to {end_node}")

all_shortest_distances, predecessors = floyd_warshall_with_path(smallest_adjacency_matrix)
shortest_distance = all_shortest_distances[start_node][end_node]

if shortest_distance < float('inf'):
    print(f"Shortest distance from {start_node} to {end_node}: {shortest_distance}")
    shortest_path = reconstruct_path(predecessors, start_node, end_node)
    print(f"Shortest path: {shortest_path}")
else:
    print(f"No path from {start_node} to {end_node}")

all_shortest_distances, predecessors = floyd_warshall_with_path(blocked_adjacency_matrix)
shortest_distance = all_shortest_distances[start_node][end_node]

if shortest_distance < float('inf'):
    print(f"Shortest distance from {start_node} to {end_node}: {shortest_distance}")
    shortest_path = reconstruct_path(predecessors, start_node, end_node)
    print(f"Shortest path: {shortest_path}")
else:
    print(f"No path from {start_node} to {end_node}")

